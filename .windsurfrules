# General Code Style & Formatting

- Use the latest syntax and features of GDScript 4.4 when generating code.
- Use explicit type hints.
- Use typed arrays (e.g. `Array[int]` instead of `Array`)
- Never use `:=` to infer a type.
- Never use `Dictionary`. Implement with custom classes.
- Use New Signal Syntax: Prefer the `signal` keyword and the `signal_name.connect(_on_name)` method on the signal itself. Name all signals with a `signal_` prefix, and connection functions with `_on_`.
- Use the `@export` annotation for exported variables.
- Never use `@onready var x = $Node2D`, and use `@export var x : Node2D` instead.
- Use `await` to handle asynchronous operations.
- Use `null` instead of `Nil`

# State machine implementation

States are implemented as separate classes that extends State. `p` gives the entity that has the state (e.g. player), `sm` is the state machine, functions `enter`, `exit`, `physics_update` and `update` can be used and are automatically called. Use `sm.on_child_transition(self, "SomeStateName")` to transition to another state.

Private functions and attributes should start with an underscore `_`.
